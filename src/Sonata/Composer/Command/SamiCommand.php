<?php

/*
* This file is part of the Sonata project.
*
* (c) Thomas Rabaix <thomas.rabaix@sonata-project.org>
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/

namespace Sonata\Composer\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;

class SamiCommand extends Command
{
    /**
     * {@inheritdoc}
     */
    public function configure()
    {
        $this
            ->setName('api:generate')
            ->setDescription('Run tests on each dependency')
            ->addArgument('folder', InputArgument::REQUIRED, 'the folder where the repository is located')
            ->addArgument('build-folder', InputArgument::REQUIRED, 'The build folder where reports will be generated')
        ;
    }

    /**
     * {@inheritdoc}
     */
    public function execute(InputInterface $input, OutputInterface $output)
    {
        if (!is_writable($input->getArgument('build-folder'))) {
            throw new \RuntimeException(sprintf('The build folder %s is not writable', $input->getOption('build-folder')));
        }

        if (!is_dir($input->getArgument('folder'))) {
            throw new \RuntimeException(sprintf('The folder %s does not exist', $input->getArgument('folder')));
        }

        $folder = realpath($input->getArgument('folder'));
        $buildFolder = realpath($input->getArgument('build-folder'));
        $samiConf = sprintf("%s/sami-config.php", $buildFolder);

        // need a better vendor detection folder ...
        $r = new \ReflectionClass('Composer\Autoload\ClassLoader');

        $vendorFolder = realpath(dirname($r->getFileName()).'/../sami/sami');
        $output->writeln(sprintf('Generating default Sami Configuration in <info>%s</info>', $samiConf));

        file_put_contents($samiConf, <<<CONTENT
<?php

/**
 * This file is autogenerated by the Sonata Composer Archiver tool
 *
 * for more information about this file, please review https://github.com/fabpot/Sami
 **/

use Sami\Sami;
use Symfony\Component\Finder\Finder;

\$iterator = Finder::create()
    ->files()
    ->name('*.php')
    ->exclude('Resources')
    ->exclude('Tests')
    ->exclude('cache')
    ->exclude('spec')
    ->exclude('Test')
    ->in('$folder')
;

return new Sami(\$iterator, array(
    'title'                => 'API',
    'default_opened_level' => 0,
    'build_dir'            => '$buildFolder',
    'cache_dir'            => '$buildFolder.cache',
    'theme'                => 'enhanced',
    'simulate_namespaces'  => false,
));
CONTENT
        );

        $cmd = sprintf("php %s/sami.php update %s", $vendorFolder, $samiConf);

        $output->writeln(sprintf("Starting command %s", $cmd));

        $process = new Process($cmd);
        $process->setTimeout(null);

        $process->run(function($type, $data) use ($output) {
            $output->write($data, false, OutputInterface::OUTPUT_PLAIN);
        });

        $output->writeln(sprintf("Deleting cache folder %s/api-cache", $buildFolder));

        $process = new Process(sprintf("rm -rf %s.cache %s", $buildFolder, $samiConf));
        $process->run();

        $output->writeln('Done!');
    }
}